From 4a4e1c66a2f304d82ec46d814568a3ae0784df03 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Tue, 17 Jan 2023 17:05:28 -0800
Subject: [PATCH 2/3] ath12k: add support for MLO SSR Mode0

When target asserts, firmware asserts all chips in MLO group.
Driver recovers all the chips by first cleaning the driver
context and finally calling iee80211_restart_hw to inform
mac80211 to reconfigure all the BSS information. This patch
assumes support from mac80211 for MLO target recovery.
currently supports only AP mode.

Co-Developed-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Co-Developed-By: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 245 +++++++++++++++----------
 drivers/net/wireless/ath/ath12k/core.h |   9 +
 drivers/net/wireless/ath/ath12k/mac.c  |  19 +-
 drivers/net/wireless/ath/ath12k/qmi.c  |   6 +-
 4 files changed, 174 insertions(+), 105 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index d4a059c5e903..15fe158614d5 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -43,6 +43,8 @@ static unsigned int ath12k_en_fwlog = true;
 module_param_named(en_fwlog, ath12k_en_fwlog, uint, 0644);
 MODULE_PARM_DESC(en_fwlog, "fwlog: 0-disable, 1-enable");
 
+static unsigned int ath12k_recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
+
 static DEFINE_MUTEX(ath12k_hw_lock);
 static struct list_head ath12k_hw_groups = LIST_HEAD_INIT(ath12k_hw_groups);
 
@@ -132,6 +134,7 @@ ath12k_core_hw_group_alloc(u8 id, u8 max_chip)
 	ag->mlo_capable = !!ath12k_mlo_capable;
 	list_add(&ag->list, &ath12k_hw_groups);
 	mutex_init(&ag->mutex_lock);
+	ag->hw_queues_stopped = false;
 
 	return ag;
 }
@@ -966,10 +969,8 @@ static int ath12k_core_start(struct ath12k_base *ab,
 		goto err_reo_cleanup;
 	}
 
-	if (!test_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags)) {
-		/* Indicate the core start in the appropriate group */
-		ab->ag->num_started++;
- 	}
+	/* Indicate the core start in the appropriate group */
+	ab->ag->num_started++;
 
 	return 0;
 
@@ -1328,106 +1329,87 @@ err_hal_srng_deinit:
 	return ret;
 }
 
-void ath12k_core_halt(struct ath12k *ar)
+static void ath12k_core_mlo_hw_queues_stop(struct ath12k_hw_group *ag)
 {
-	struct ath12k_base *ab = ar->ab;
-
-	lockdep_assert_held(&ar->conf_mutex);
+	struct ath12k_hw *ah;
+	int i;
 
-	ar->num_created_vdevs = 0;
-	ar->allocated_vdev_map = 0;
+	lockdep_assert_held(&ag->mutex_lock);
 
-	ath12k_mac_scan_finish(ar);
-	ath12k_mac_peer_cleanup_all(ar);
-	cancel_delayed_work_sync(&ar->scan.timeout);
-	cancel_work_sync(&ar->regd_update_work);
+	for (i = 0; i < ag->num_hw; i++) {
+		ah = ag->ah[i];
+		if (!ah)
+			continue;
 
-	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
-	synchronize_rcu();
-	INIT_LIST_HEAD(&ar->arvifs);
-	idr_init(&ar->txmgmt_idr);
+		ieee80211_stop_queues(ah->hw);
+	}
+	ag->hw_queues_stopped = true;
 }
 
-static void ath12k_core_restart(struct work_struct *work)
+static void ath12k_core_pre_reconfigure_recovery(struct ath12k_base *ab)
 {
-	struct ath12k_base *ab = container_of(work, struct ath12k_base, restart_work);
-	struct ath12k_hw_group *ag = ab->ag;
-	int ret;
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
 	struct ath12k_link_vif *arvif;
-	struct ath12k_hw *ah;
-	int i, j;
+	int i;
 
 	spin_lock_bh(&ab->base_lock);
 	ab->stats.fw_crash_counter++;
 	spin_unlock_bh(&ab->base_lock);
 
-	for (i = 0; i < ag->num_hw; i++) {
-		ah = ag->ah[i];
-		if (!ah)
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		ar = pdev->ar;
+		if (!ar || ar->state == ATH12K_STATE_OFF)
 			continue;
 
-		ieee80211_stop_queues(ah->hw);
-	}
-
-	for (i = 0; i < ag->num_chip; i++) {
-		ab = ag->ab[i];
+		list_for_each_entry(arvif, &ar->arvifs, list)
+			if (arvif->is_started)
+				ath12k_debugfs_remove_interface(arvif);
 
-		for (j = 0; j < ab->num_radios; j++) {
-			pdev = &ab->pdevs[j];
-			ar = pdev->ar;
-			if (!ar || ar->state == ATH12K_STATE_OFF)
-				continue;
+		ath12k_mac_drain_tx(ar);
+		complete(&ar->scan.started);
+		complete(&ar->scan.completed);
+		complete(&ar->peer_assoc_done);
+		complete(&ar->peer_delete_done);
+		complete(&ar->install_key_done);
+		complete(&ar->vdev_setup_done);
+		complete(&ar->vdev_delete_done);
+		complete(&ar->bss_survey_done);
+		complete(&ar->thermal.wmi_sync);
 
-			list_for_each_entry(arvif, &ar->arvifs, list) {
-				if (arvif->is_started) {
-					ath12k_debugfs_remove_interface(arvif);
-				}
-			}
+		wake_up(&ar->dp.tx_empty_waitq);
+		idr_for_each(&ar->txmgmt_idr,
+			     ath12k_mac_tx_mgmt_pending_free, ar);
+		idr_destroy(&ar->txmgmt_idr);
+		wake_up(&ar->txmgmt_empty_waitq);
 
-			ath12k_mac_drain_tx(ar);
-			complete(&ar->scan.started);
-			complete(&ar->scan.completed);
-			complete(&ar->peer_assoc_done);
-			complete(&ar->peer_delete_done);
-			complete(&ar->install_key_done);
-			complete(&ar->vdev_setup_done);
-			complete(&ar->vdev_delete_done);
-			complete(&ar->bss_survey_done);
-			complete(&ar->thermal.wmi_sync);
-
-			wake_up(&ar->dp.tx_empty_waitq);
-			idr_for_each(&ar->txmgmt_idr,
-				     ath12k_mac_tx_mgmt_pending_free, ar);
-			idr_destroy(&ar->txmgmt_idr);
-			wake_up(&ar->txmgmt_empty_waitq);
-
-			ar->monitor_vdev_id = -1;
-			clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
-			clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
-		}
+		ar->monitor_vdev_id = -1;
+		clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
+		clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
+	}
 
-		wake_up(&ab->wmi_ab.tx_credits_wq);
-		wake_up(&ab->peer_mapping_wq);
+	wake_up(&ab->wmi_ab.tx_credits_wq);
+	wake_up(&ab->peer_mapping_wq);
 
+}
 
-		ret = ath12k_core_reconfigure_on_crash(ab);
-		if (ret) {
-			ath12k_err(ab, "failed to reconfigure driver on crash recovery\n");
-			return;
-		}
+static void ath12k_core_post_reconfigure_recovery(struct ath12k_base *ab)
+{
+	struct ath12k *ar;
+	struct ath12k_pdev *pdev;
+	int i;
 
-		for (j = 0; j < ab->num_radios; j++) {
-			pdev = &ab->pdevs[j];
-			ar = pdev->ar;
-			if (!ar || ar->state == ATH12K_STATE_OFF ||
-				ar->state == ATH12K_STATE_TM)
-				continue;
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		ar = pdev->ar;
+		if (!ar || ar->state == ATH12K_STATE_OFF ||
+		    ar->state == ATH12K_STATE_TM)
+			continue;
 
-			mutex_lock(&ar->conf_mutex);
+		mutex_lock(&ar->conf_mutex);
 
-			switch (ar->state) {
+		switch (ar->state) {
 			case ATH12K_STATE_ON:
 				ar->state = ATH12K_STATE_RESTARTING;
 				ath12k_core_halt(ar);
@@ -1435,50 +1417,99 @@ static void ath12k_core_restart(struct work_struct *work)
 			case ATH12K_STATE_OFF:
 				ath12k_warn(ab,
 					    "cannot restart radio %d that hasn't been started\n",
-					    j);
+					    i);
 				break;
 			case ATH12K_STATE_RESTARTING:
+				ar->state = ATH12K_STATE_RESTARTED;
 				break;
 			case ATH12K_STATE_RESTARTED:
 				ar->state = ATH12K_STATE_WEDGED;
 				fallthrough;
 			case ATH12K_STATE_WEDGED:
 				ath12k_warn(ab,
-					    "device is wedged, will not restart radio %d\n", j);
+					    "device is wedged, will not restart radio %d\n", i);
 				break;
 			case ATH12K_STATE_TM:
-				ath12k_warn(ab, "fw mode reset done radio %d\n", j);
+				ath12k_warn(ab, "fw mode reset done radio %d\n", i);
 				break;
-			}
-			mutex_unlock(&ar->conf_mutex);
 		}
+		mutex_unlock(&ar->conf_mutex);
+	}
+}
 
-		if (ab->is_reset) {
-			atomic_dec(&ab->reset_count);
-			complete(&ab->reset_complete);
-			ab->is_reset = false;
-		}
+void ath12k_core_halt(struct ath12k *ar)
+{
+	struct ath12k_base *ab = ar->ab;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	ar->num_created_vdevs = 0;
+	ar->allocated_vdev_map = 0;
+
+	ath12k_mac_scan_finish(ar);
+	ath12k_mac_peer_cleanup_all(ar);
+	cancel_delayed_work_sync(&ar->scan.timeout);
+	cancel_work_sync(&ar->regd_update_work);
+	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
+	synchronize_rcu();
+	INIT_LIST_HEAD(&ar->arvifs);
+	idr_init(&ar->txmgmt_idr);
+}
 
-		complete(&ab->driver_recovery);
+static void ath12k_core_restart(struct work_struct *work)
+{
+	struct ath12k_base *ab = container_of(work, struct ath12k_base, restart_work);
+	struct ath12k_hw_group *ag = ab->ag;
+	int ret;
+	struct ath12k_hw *ah;
+	int i;
+
+	if (!ab->is_reset)
+		ath12k_core_pre_reconfigure_recovery(ab);
+
+	ret = ath12k_core_reconfigure_on_crash(ab);
+	if (ret) {
+		ath12k_err(ab, "failed to reconfigure driver on crash recovery\n");
+		return;
 	}
 
-	for (i = 0; i < ag->num_hw; i++) {
-		ah = ag->ah[i];
-		if (!ah)
-			continue;
+	if (!ab->is_reset)
+		ath12k_core_post_reconfigure_recovery(ab);
+
+	if (ath12k_core_hw_group_start_ready(ag) &&
+	    ath12k_recovery_mode == ATH12K_MLO_RECOVERY_MODE0) {
+		for (i = 0; i < ag->num_hw; i++) {
+			ah = ag->ah[i];
+			if (!ah)
+				continue;
 
-		mutex_lock(&ah->conf_mutex);
-		ieee80211_restart_hw(ah->hw);
-		mutex_unlock(&ah->conf_mutex);
+			mutex_lock(&ah->conf_mutex);
+			ieee80211_restart_hw(ah->hw);
+			mutex_unlock(&ah->conf_mutex);
+		}
 	}
+
 }
 
 static void ath12k_core_reset(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, reset_work);
-	int reset_count;
+	struct ath12k_hw_group *ag = ab->ag;
+	int reset_count, fail_cont_count;
 	long time_left;
 
+	/* Sometimes the recovery will fail and then the next all recovery fail,
+	 * this is to avoid infinite recovery since it can not recovery success.
+	 */
+	fail_cont_count = atomic_read(&ab->fail_cont_count);
+
+	if (fail_cont_count >= ATH12K_RESET_MAX_FAIL_COUNT_FINAL)
+		return;
+
+	if (fail_cont_count >= ATH12K_RESET_MAX_FAIL_COUNT_FIRST &&
+	    time_before(jiffies, ab->reset_fail_timeout))
+		return;
+
 	reset_count = atomic_inc_return(&ab->reset_count);
 
 	if (reset_count > 1) {
@@ -1497,11 +1528,28 @@ static void ath12k_core_reset(struct work_struct *work)
 			return;
 		}
 
+		ab->reset_fail_timeout = jiffies + ATH12K_RESET_FAIL_TIMEOUT_HZ;
+		/* Record the continuous recovery fail count when recovery failed*/
+		atomic_inc(&ab->fail_cont_count);
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset starting\n");
 
+	mutex_lock(&ag->mutex_lock);
 	ab->is_reset = true;
+	atomic_set(&ab->recovery_count, 0);
+
+	/* Incase recovery fails and FW asserts again, this is to prevent invalid operation. */
+	if (ag->num_started)
+		ag->num_started--;
+
+	if (!ag->hw_queues_stopped)
+		ath12k_core_mlo_hw_queues_stop(ag);
+
+	ath12k_core_pre_reconfigure_recovery(ab);
+
+	ath12k_core_post_reconfigure_recovery(ab);
+
 	/* reset host fixed mem off to zero */
 	ab->host_ddr_fixed_mem_off = 0;
 	/* prepare coredump */
@@ -1513,6 +1561,7 @@ static void ath12k_core_reset(struct work_struct *work)
 
 		ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
 	}
+	mutex_unlock(&ag->mutex_lock);
 }
 
 int ath12k_core_pre_init(struct ath12k_base *ab)
@@ -1755,8 +1804,6 @@ struct ath12k_base *ath12k_core_alloc(struct device *dev, size_t priv_size,
 	if (!ab)
 		return NULL;
 
-	init_completion(&ab->driver_recovery);
-
 	ab->workqueue = create_singlethread_workqueue("ath12k_wq");
 	if (!ab->workqueue)
 		goto err_sc_free;
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index b47fe0bc7fcc..0700b1e4f2c2 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1034,6 +1034,10 @@ struct ath12k_mlo_memory {
 	bool init_done;
 };
 
+enum ath12k_mlo_recovery_mode {
+	ATH12K_MLO_RECOVERY_MODE0,
+};
+
 /* Holds info on the group of SOCs that are registered as a single wiphy
  * or single SOC where each radio registered as separate wiphy in non-MLO
  */
@@ -1046,6 +1050,7 @@ struct ath12k_hw_group {
 	u8 num_started;
 	u8 num_hw;
 	bool mlo_capable;
+	bool hw_queues_stopped;
 	unsigned long dev_flags;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
@@ -1142,10 +1147,14 @@ struct ath12k_base {
 	struct work_struct restart_work;
 	struct workqueue_struct *workqueue_aux;
 	struct work_struct reset_work;
+	atomic_t recovery_count;
 	atomic_t reset_count;
 	bool is_reset;
 	struct completion reset_complete;
+	struct completion reconfigure_complete;
 	unsigned long reset_fail_timeout;
+        /* continuous recovery fail count */
+        atomic_t fail_cont_count;
 	struct {
 		/* protected by data_lock */
 		u32 fw_crash_counter;
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 78e831f7b945..c2681c0f15de 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -12653,7 +12653,7 @@ ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
-	u8 restart_count = 0;
+	u8 restart_count = 0, recovery_count;
 	int i;
 
 	if (reconfig_type != IEEE80211_RECONFIG_TYPE_RESTART)
@@ -12673,6 +12673,22 @@ ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
 			restart_count++;
 		}
 
+		if (ar->ab->is_reset) {
+			recovery_count = atomic_inc_return(&ar->ab->recovery_count);
+			ath12k_dbg(ar->ab, ATH12K_DBG_BOOT,
+				   "recovery count %d\n", recovery_count);
+			/* When there are multiple radios in an SOC,
+			 * the recovery has to be done for each radio
+			 */
+			if (recovery_count == ar->ab->num_radios) {
+				atomic_dec(&ar->ab->reset_count);
+				complete(&ar->ab->reset_complete);
+				ar->ab->is_reset = false;
+				atomic_set(&ar->ab->fail_cont_count, 0);
+				ath12k_dbg(ar->ab, ATH12K_DBG_BOOT, "reset success\n");
+			}
+		}
+
 		mutex_unlock(&ar->conf_mutex);
 		ar++;
 	}
@@ -12681,6 +12697,7 @@ ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
 		ieee80211_wake_queues(ah->hw);
 
 	mutex_unlock(&ah->conf_mutex);
+	ah->ag->hw_queues_stopped = false;
 }
 
 static void
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index e2e1b2cc01f3..f13fb5de7aee 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3237,12 +3237,9 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 
 	lockdep_assert_held(&ag->mutex_lock);
 
-	if (!ag->mlo_mem.init_done)
+	if (!ag->mlo_mem.init_done || ag->num_started)
 		return;
 
-	if (ag->num_started)
-		goto out;
-
 	if (idx >= ARRAY_SIZE(ag->mlo_mem.chunk)) {
 		ath12k_warn(ab, "invalid idx %d for MLO memory chunk free\n", idx);
 		return;
@@ -3268,7 +3265,6 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 	mlo_chunk->paddr = NULL;
 	mlo_chunk->size = 0;
 
-out:
 	if (fixed_mem)
 		chunk->v.ioaddr = NULL;
 	else
-- 
2.17.1

