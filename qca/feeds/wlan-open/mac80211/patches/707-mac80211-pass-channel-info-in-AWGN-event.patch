From 580cb5e6c0a0416062e30acd76a8ffb49f02555d Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Sat, 7 Jan 2023 22:56:24 +0530
Subject: [PATCH] mac80211: pass channel info in AWGN event

Currently during AWGN event, drivers only passes the
ieee80211_hw on which AWGN interference is detected and
the interference bitmap. The worker, iterates over each
channel contexts avaiable under the hardware and expects
only 1 channel contexts to be present. Then, with this
channel context it executes further steps.

However, with MLO, there can be more than 1 channel contexts
available under the hardware hence while iterating, it is
important to know on which channel AWGN interference was
detected.

Add logic to pass channel info as well in the AWGN detcted
event and use it properly to process further in the AWGN
event.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/wmi.c |  3 ++-
 drivers/net/wireless/ath/ath12k/wmi.c |  3 ++-
 include/net/mac80211.h                |  5 ++++-
 net/mac80211/ieee80211_i.h            |  1 +
 net/mac80211/util.c                   | 28 ++++++++++++++++++++++-----
 5 files changed, 32 insertions(+), 8 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/wmi.c b/drivers/net/wireless/ath/ath11k/wmi.c
index d7ad678..ee23cd7 100644
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -9757,7 +9757,8 @@ ath11k_wmi_dcs_awgn_interference_event(struct ath11k_base *ab,
 	}
 	ar->awgn_chandef = *chandef;
 
-	ieee80211_awgn_detected(ar->hw, awgn_info.chan_bw_interference_bitmap);
+	ieee80211_awgn_detected(ar->hw, awgn_info.chan_bw_interference_bitmap,
+				NULL);
 
 	spin_lock_bh(&ar->data_lock);
 	/* Incase of mesh intf presence, dont set in prog as there will be no
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 518375a..08a1232 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8714,7 +8714,8 @@ ath12k_wmi_dcs_awgn_interference_event(struct ath12k_base *ab,
         }
         ar->awgn_chandef = *chandef;
 
-        ieee80211_awgn_detected(ah->hw, awgn_info.chan_bw_interference_bitmap);
+	ieee80211_awgn_detected(ah->hw, awgn_info.chan_bw_interference_bitmap,
+				chandef->chan);
 
         spin_lock_bh(&ar->data_lock);
         ar->awgn_intf_handling_in_prog = true;
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 42398d0..c1a5329 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -6610,8 +6610,11 @@ void ieee80211_channel_switch_disconnect(struct ieee80211_vif *vif,
  *
  * @hw: pointer as obtained from ieee80211_alloc_hw()
  * @chan_bw_interference_bitmap : awgn interference bitmap
+ * @awgn_channel: Channel pointer on which AWGN is detected. Mandatory to pass
+ *	for MLO drivers. For non-MLO %NULL can be passed
  */
-void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap);
+void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap,
+			     struct ieee80211_channel *awgn_channel);
 
 /**
  * ieee80211_request_smps - request SM PS transition
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index a6d26cf..46cd46f 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1585,6 +1585,7 @@ struct ieee80211_local {
 	struct mac80211_memory_stats memory_stats;
 	struct work_struct awgn_detected_work;
 	u32 chan_bw_interference_bitmap;
+	struct ieee80211_channel *awgn_channel;
 	u16 radar_bitmap;
 
 	bool enable_tx_latency_stats;
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 40274b4..8385a5b 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4286,6 +4286,7 @@ void ieee80211_awgn_detected_work(struct work_struct *work)
 	struct ieee80211_local *local =
 		container_of(work, struct ieee80211_local, awgn_detected_work);
 	struct cfg80211_chan_def chandef = local->hw.conf.chandef;
+	struct cfg80211_chan_def *awgn_chandef = NULL;
 	struct ieee80211_chanctx *ctx;
 	int num_chanctx = 0;
 
@@ -4296,15 +4297,29 @@ void ieee80211_awgn_detected_work(struct work_struct *work)
 
 		num_chanctx++;
 		chandef = ctx->conf.def;
+
+		if (local->awgn_channel &&
+		    (chandef.chan == local->awgn_channel))
+			awgn_chandef = &ctx->conf.def;
 	}
 	mutex_unlock(&local->chanctx_mtx);
 
-	if (num_chanctx > 1)
-		/* XXX: multi-channel is not supported yet */
-		WARN_ON_ONCE(1);
-	else
+	if (num_chanctx > 1) {
+		if (local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO) {
+			if (WARN_ON(!awgn_chandef))
+				return;
+
+			cfg80211_awgn_event(local->hw.wiphy, awgn_chandef,
+					    GFP_KERNEL,
+					    local->chan_bw_interference_bitmap);
+		} else {
+			/* XXX: multi-channel is not supported yet */
+			WARN_ON_ONCE(1);
+		}
+	} else {
 		cfg80211_awgn_event(local->hw.wiphy, &chandef, GFP_KERNEL,
 				    local->chan_bw_interference_bitmap);
+	}
 }
 
 void ieee80211_dfs_radar_detected_work(struct work_struct *work)
@@ -4379,11 +4394,14 @@ void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap,
 }
 EXPORT_SYMBOL(ieee80211_radar_detected_bitmap);
 
-void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap)
+void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap,
+			     struct ieee80211_channel *awgn_channel)
 {
 	struct ieee80211_local *local = hw_to_local(hw);
 
 	local->chan_bw_interference_bitmap = chan_bw_interference_bitmap;
+	local->awgn_channel = awgn_channel;
+
 	schedule_work(&local->awgn_detected_work);
 }
 EXPORT_SYMBOL(ieee80211_awgn_detected);
-- 
2.17.1

